{"6at1okgFu7GzMzg9keni3WXeVsskhgsVC6eHdf6hjKHiau77DwTrqNDDFk4OLh8GTeg2eHmBjIY":{"userInfo":{"username":"Abhishek Dagar","bio":"I am good at frontend/backend developer","Desgnation":"software Engineer"},"userCodeData":[{"foldername":"Searching","name":"code.js","content":"// import visualization libraries {\r\nconst {\r\n  Tracer,\r\n  Array1DTracer,\r\n  LogTracer,\r\n  Layout,\r\n  VerticalLayout,\r\n} = require(\"algorithm-visualizer\");\r\n// }\r\n\r\nconst array = [2, 8, 8, 10, 11, 13, 14, 26, 26, 29, 30, 31, 42, 47, 49];\r\nconst ele = 29;\r\n// define tracer variables {\r\nconst tracer = new Array1DTracer(\"Binary Search\");\r\ntracer.set(array);\r\nconst logger = new LogTracer();\r\nLayout.setRoot(new VerticalLayout([tracer, logger]));\r\nTracer.delay();\r\n// }\r\n\r\nfunction binarySearch(array, start, end, element) {\r\n  if (start > end) {\r\n    return false;\r\n  } else {\r\n    tracer.select(start, end);\r\n    logger.println(`Start index ${start} end index ${end}`);\r\n    Tracer.delay();\r\n\r\n    mid = Math.ceil(start + (end - start) / 2);\r\n\r\n    tracer.patch(mid);\r\n    Tracer.delay();\r\n\r\n    if (array[mid] === element) {\r\n      return mid;\r\n    } else if (array[mid] > element) {\r\n      logger.println(`Element is smaller so Going Left <---`);\r\n      Tracer.delay();\r\n      tracer.deselect(start, end);\r\n      tracer.depatch(mid);\r\n\r\n      return binarySearch(array, start, mid - 1, element);\r\n    } else {\r\n      logger.println(` Element is greater so Going Left --->`);\r\n      Tracer.delay();\r\n      tracer.deselect(start, end);\r\n      tracer.depatch(mid);\r\n\r\n      return binarySearch(array, mid + 1, end, element);\r\n    }\r\n  }\r\n}\r\n\r\nconst result = binarySearch(array, 0, array.length - 1, ele);\r\nif (result) {\r\n  tracer.selectTrue(mid);\r\n  logger.println(`Element is present at index ${result}`);\r\n} else {\r\n  logger.println(`Element is not present in array`);\r\n}\r\n"},{"foldername":"Sorting","name":"code.js","content":"// import visualization libraries {\r\nconst {\r\n  Tracer,\r\n  Array1DTracer,\r\n  ChartTracer,\r\n  LogTracer,\r\n  Randomize,\r\n  Layout,\r\n  VerticalLayout,\r\n  HorizontalLayout,\r\n} = require(\"algorithm-visualizer\");\r\n// }\r\n\r\n// define tracer variables {\r\nconst chart = new ChartTracer(\"Merge Sort - Chart \");\r\nconst tracer = new Array1DTracer(\"Merge Sort - Array \");\r\nconst leftarray = new Array1DTracer(\"Left Array \");\r\nconst rightarray = new Array1DTracer(\"Right Array \");\r\nconst Vlayout = new VerticalLayout([leftarray, rightarray]);\r\nconst Hlayout = new HorizontalLayout([tracer, Vlayout]);\r\nconst logger = new LogTracer();\r\nLayout.setRoot(new VerticalLayout([chart, Hlayout, logger]));\r\nconst D = Randomize.Array1D({ N: 15 });\r\ntracer.set(D);\r\ntracer.chart(chart);\r\nTracer.delay();\r\n// }\r\n\r\n// logger {\r\nlogger.println(`original array = [${D.join(\", \")}]`);\r\n// }\r\n\r\nfunction mergeSort(start, end) {\r\n  if (Math.abs(end - start) <= 1) return [];\r\n  const middle = Math.ceil((start + end) / 2);\r\n\r\n  mergeSort(start, middle);\r\n  mergeSort(middle, end);\r\n\r\n  // logger {\r\n  logger.println(\r\n    `divide left[${start}, ${middle - 1}], right[${middle}, ${end - 1}]`\r\n  );\r\n  // }\r\n  return mergeSort.merge(start, middle, end);\r\n}\r\n\r\nmergeSort.merge = (start, middle, end) => {\r\n  const leftSize = middle - start;\r\n  const rightSize = end - middle;\r\n  const maxSize = Math.max(leftSize, rightSize);\r\n  const size = end - start;\r\n  const left = [];\r\n  const right = [];\r\n  let i;\r\n  // setting left and right {\r\n  leftarray.set(left);\r\n  rightarray.set(right);\r\n  // }\r\n  \r\n  for (i = 0; i < maxSize; i++) {\r\n    if (i < leftSize) {\r\n      left.push(D[start + i]);\r\n      // visualize {\r\n      leftarray.set(left);\r\n      tracer.select(start + i);\r\n      logger.println(`insert value into left array[${i}] = ${D[start + i]}`);\r\n      Tracer.delay();\r\n      // }\r\n    }\r\n    if (i < rightSize) {\r\n      right.push(D[middle + i]);\r\n      // visualize {\r\n      rightarray.set(right);\r\n      tracer.select(middle + i);\r\n      logger.println(`insert value into right array[${i}] = ${D[middle + i]}`);\r\n      Tracer.delay();\r\n      // }\r\n    }\r\n  }\r\n  // logger {\r\n  logger.println(\r\n    `left array = [${left.join(\", \")}], ` +\r\n      `right array = [${right.join(\", \")}]`\r\n  );\r\n  // }\r\n\r\n  i = 0;\r\n  while (i < size) {\r\n    if (left[0] && right[0]) {\r\n      if (left[0] > right[0]) {\r\n        rightarray.patch(0);\r\n\r\n        D[start + i] = right.shift();\r\n        // logger {\r\n        logger.println(`rewrite from right array[${i}] = ${D[start + i]}`);\r\n        // }\r\n      } else {\r\n        leftarray.patch(0);\r\n\r\n        D[start + i] = left.shift();\r\n        // logger {\r\n        logger.println(`rewrite from left array[${i}] = ${D[start + i]}`);\r\n        // }\r\n      }\r\n    } else if (left[0]) {\r\n      leftarray.patch(0);\r\n\r\n      D[start + i] = left.shift();\r\n      // logger {\r\n      logger.println(`rewrite from left array[${i}] = ${D[start + i]}`);\r\n      // }\r\n    } else {\r\n      rightarray.patch(0);\r\n      D[start + i] = right.shift();\r\n      // logger {\r\n      logger.println(`rewrite from right array[${i}] = ${D[start + i]}`);\r\n      // }\r\n    }\r\n\r\n    // visualize {\r\n    tracer.deselect(start + i);\r\n    tracer.patch(start + i, D[start + i]);\r\n    Tracer.delay();\r\n    rightarray.set(right);\r\n    leftarray.set(left);\r\n    tracer.depatch(start + i);\r\n    // }\r\n    i++;\r\n  }\r\n\r\n  const tempArray = [];\r\n  for (i = start; i < end; i++) tempArray.push(D[i]);\r\n  // logger {\r\n  logger.println(`merged array = [${tempArray.join(\", \")}]`);\r\n  // }\r\n};\r\n\r\nmergeSort(0, D.length);\r\n// visualize {\r\nfor (let i = 0; i < D.length; i++) {\r\n  tracer.selectTrue(i);\r\n  Tracer.delay();\r\n}\r\n// }\r\nlogger.println(`sorted array = [${D.join(\", \")}]`);\r\n"},{"foldername":"Tree","name":"code.js","content":"// import visualization libraries {\r\n    const { Tracer, Array1DTracer, GraphTracer, LogTracer, Layout, VerticalLayout } = require('algorithm-visualizer');\r\n    // }\r\n    \r\n    const T = {};\r\n    \r\n    const elements = [5, 8, 10, 3, 1, 6, 9, 7, 2, 0, 4]; // item to be inserted\r\n    \r\n    // define tracer variables {\r\n    const graphTracer = new GraphTracer(' BST - Elements marked red indicates the current status of tree ');\r\n    const elemTracer = new Array1DTracer(' Elements ');\r\n    const logger = new LogTracer(' Log ');\r\n    Layout.setRoot(new VerticalLayout([graphTracer, elemTracer, logger]));\r\n    elemTracer.set(elements);\r\n    graphTracer.log(logger);\r\n    Tracer.delay();\r\n    // }\r\n    \r\n    function bstInsert(root, element, parent) { // root = current node , parent = previous node\r\n      // visualize {\r\n      graphTracer.visit(root, parent);\r\n      Tracer.delay();\r\n      // }\r\n      const treeNode = T[root];\r\n      let propName = '';\r\n      if (element < root) {\r\n        propName = 'left';\r\n      } else if (element > root) {\r\n        propName = 'right';\r\n      }\r\n      if (propName !== '') {\r\n        if (!(propName in treeNode)) { // insert as left child of root\r\n          treeNode[propName] = element;\r\n          T[element] = {};\r\n          // visualize {\r\n          graphTracer.addNode(element);\r\n          graphTracer.addEdge(root, element);\r\n          graphTracer.select(element, root);\r\n          Tracer.delay();\r\n          graphTracer.deselect(element, root);\r\n          logger.println(`${element} Inserted`);\r\n          // }\r\n        } else {\r\n          bstInsert(treeNode[propName], element, root);\r\n        }\r\n      }\r\n      // visualize {\r\n      graphTracer.leave(root, parent);\r\n      Tracer.delay();\r\n      // }\r\n    }\r\n    \r\n    const Root = elements[0]; // take first element as root\r\n    T[Root] = {};\r\n    // visualize {\r\n    graphTracer.addNode(Root);\r\n    graphTracer.layoutTree(Root, true);\r\n    logger.println(`${Root} Inserted as root of tree `);\r\n    // }\r\n    \r\n    for (let i = 1; i < elements.length; i++) {\r\n      // visualize {\r\n      elemTracer.select(i);\r\n      Tracer.delay();\r\n      // }\r\n      bstInsert(Root, elements[i]); // insert ith element\r\n      // visualize {\r\n      elemTracer.deselect(i);\r\n      Tracer.delay();\r\n      // }\r\n    }\r\n    "}]},"N33oB6gEhdesEDqVImuSAHlJa14vrkFG9yb974MM6Hs5hjSScwxM9P9PzoSU5Y8rtrV9qfRzhwk":{"userInfo":{"username":"Test","bio":"I like testing","Desgnation":"Tester"},"userCodeData":[]}}